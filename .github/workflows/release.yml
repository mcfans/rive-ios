name: Create a Release

on:
  workflow_dispatch:
    inputs:
      major:
        description: "Major"
        type: boolean
        default: false
      minor:
        description: "Minor"
        type: boolean
        default: false

jobs:
  determine_version:
    name: Determine the next build version
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.set_version.outputs.version }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - id: set_version
        name: Set Version
        run: |
          if [ "${{ inputs.major }}" = "true" ]; then
            echo "::set-output name=version::$(date +'%Y.%m.%d')"
          elif [ "${{ inputs.minor }}" = "true" ]; then
            echo "::set-output name=version::$(date +'%Y.%m.%d')"
          else
            echo "::set-output name=version::$(date +'%Y.%m.%d')"
          fi

  build_framework:
    name: Create RiveRuntime.xcframework
    runs-on: macos-14
    needs: [determine_version]
    outputs:
      checksum: ${{steps.get_checksum.outputs.checksum}}
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3
        with:
          submodules: true

      - name: Configure venv
        run: |
          python3 -m venv .venv
          source .venv/bin/activate
          echo PATH=$PATH >> $GITHUB_ENV

      - name: Installing pre-requisites
        run: |
          set -x
          brew install ninja
          curl https://github.com/premake/premake-core/releases/download/v5.0.0-beta2/premake-5.0.0-beta2-macosx.tar.gz -L -o premake_macosx.tar.gz
          tar -xvf premake_macosx.tar.gz 2>/dev/null
          rm premake_macosx.tar.gz
          mkdir bin
          sudo chmod a+x premake5
          cp premake5 bin/premake5
          sudo mv premake5 /usr/local/bin
          pip3 install ply

      - name: Select Xcode 15.4
        run: sudo xcodes select 15.4

      - name: Install all Xcode platforms
        run: xcodebuild -downloadAllPlatforms

      - name: Build everything
        run: ./scripts/build.sh all

      - id: build_frameworks
        name: Build frameworks
        run: sh ./scripts/build_framework.sh -c Release

      - id: zip
        name: Zip the framework
        run: zip --symlinks -r RiveRuntime.xcframework.zip RiveRuntime.xcframework
        working-directory: ./archive

      - id: get_checksum
        name: Add the checksum
        run: echo "::set-output name=checksum::$(swift package compute-checksum archive/RiveRuntime.xcframework.zip)"

  do_release:
    name: Create Release with Package.swift
    runs-on: ubuntu-latest
    needs: [determine_version, build_framework]
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - id: read_package_template
        uses: pCYSl5EDgo/cat@master
        with:
          path: .github/workflows/Package.swift.template

      - name: Create Package.swift
        run: |
          cat > Package.swift <<-EOF
          ${{ steps.read_package_template.outputs.text }}
          EOF
        env:
          CHECKSUM: ${{ needs.build_framework.outputs.checksum }}
          RELEASE_VERSION: ${{ needs.determine_version.outputs.version }}

      - name: Git config
        run: |
          git config --local user.email 'action@github.com'
          git config --local user.name 'GitHub Action'

      - name: Add & commit Package.swift
        run: |
          git add Package.swift
          git commit -m "Update Package.swift for version ${{ needs.determine_version.outputs.version }}"
          git push

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ needs.determine_version.outputs.version }}
          release_name: Release v${{ needs.determine_version.outputs.version }}
          draft: false
          prerelease: false

      - name: Upload Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./archive/RiveRuntime.xcframework.zip
          asset_name: RiveRuntime.xcframework.zip
          asset_content_type: application/zip